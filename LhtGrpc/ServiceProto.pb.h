// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ServiceProto.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ServiceProto_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ServiceProto_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ServiceProto_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ServiceProto_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ServiceProto_2eproto;
namespace ServiceNetIO {
class NewMessageRequest;
struct NewMessageRequestDefaultTypeInternal;
extern NewMessageRequestDefaultTypeInternal _NewMessageRequest_default_instance_;
class ServiceMessageResponse;
struct ServiceMessageResponseDefaultTypeInternal;
extern ServiceMessageResponseDefaultTypeInternal _ServiceMessageResponse_default_instance_;
}  // namespace ServiceNetIO
PROTOBUF_NAMESPACE_OPEN
template<> ::ServiceNetIO::NewMessageRequest* Arena::CreateMaybeMessage<::ServiceNetIO::NewMessageRequest>(Arena*);
template<> ::ServiceNetIO::ServiceMessageResponse* Arena::CreateMaybeMessage<::ServiceNetIO::ServiceMessageResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ServiceNetIO {

// ===================================================================

class NewMessageRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ServiceNetIO.NewMessageRequest) */ {
 public:
  inline NewMessageRequest() : NewMessageRequest(nullptr) {}
  ~NewMessageRequest() override;
  explicit PROTOBUF_CONSTEXPR NewMessageRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NewMessageRequest(const NewMessageRequest& from);
  NewMessageRequest(NewMessageRequest&& from) noexcept
    : NewMessageRequest() {
    *this = ::std::move(from);
  }

  inline NewMessageRequest& operator=(const NewMessageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline NewMessageRequest& operator=(NewMessageRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NewMessageRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const NewMessageRequest* internal_default_instance() {
    return reinterpret_cast<const NewMessageRequest*>(
               &_NewMessageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(NewMessageRequest& a, NewMessageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(NewMessageRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NewMessageRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NewMessageRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NewMessageRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NewMessageRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NewMessageRequest& from) {
    NewMessageRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NewMessageRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ServiceNetIO.NewMessageRequest";
  }
  protected:
  explicit NewMessageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kServerNameFieldNumber = 2,
    kEncodeTypeFieldNumber = 4,
    kBodyFieldNumber = 5,
    kOrderIdFieldNumber = 3,
  };
  // bytes header = 1;
  void clear_header();
  const std::string& header() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_header(ArgT0&& arg0, ArgT... args);
  std::string* mutable_header();
  PROTOBUF_NODISCARD std::string* release_header();
  void set_allocated_header(std::string* header);
  private:
  const std::string& _internal_header() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_header(const std::string& value);
  std::string* _internal_mutable_header();
  public:

  // string server_name = 2;
  void clear_server_name();
  const std::string& server_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_server_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_server_name();
  PROTOBUF_NODISCARD std::string* release_server_name();
  void set_allocated_server_name(std::string* server_name);
  private:
  const std::string& _internal_server_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_server_name(const std::string& value);
  std::string* _internal_mutable_server_name();
  public:

  // string encode_type = 4;
  void clear_encode_type();
  const std::string& encode_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_encode_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_encode_type();
  PROTOBUF_NODISCARD std::string* release_encode_type();
  void set_allocated_encode_type(std::string* encode_type);
  private:
  const std::string& _internal_encode_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_encode_type(const std::string& value);
  std::string* _internal_mutable_encode_type();
  public:

  // bytes body = 5;
  void clear_body();
  const std::string& body() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_body(ArgT0&& arg0, ArgT... args);
  std::string* mutable_body();
  PROTOBUF_NODISCARD std::string* release_body();
  void set_allocated_body(std::string* body);
  private:
  const std::string& _internal_body() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_body(const std::string& value);
  std::string* _internal_mutable_body();
  public:

  // int64 order_id = 3;
  void clear_order_id();
  int64_t order_id() const;
  void set_order_id(int64_t value);
  private:
  int64_t _internal_order_id() const;
  void _internal_set_order_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:ServiceNetIO.NewMessageRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr header_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr server_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encode_type_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr body_;
    int64_t order_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ServiceProto_2eproto;
};
// -------------------------------------------------------------------

class ServiceMessageResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ServiceNetIO.ServiceMessageResponse) */ {
 public:
  inline ServiceMessageResponse() : ServiceMessageResponse(nullptr) {}
  ~ServiceMessageResponse() override;
  explicit PROTOBUF_CONSTEXPR ServiceMessageResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServiceMessageResponse(const ServiceMessageResponse& from);
  ServiceMessageResponse(ServiceMessageResponse&& from) noexcept
    : ServiceMessageResponse() {
    *this = ::std::move(from);
  }

  inline ServiceMessageResponse& operator=(const ServiceMessageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServiceMessageResponse& operator=(ServiceMessageResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServiceMessageResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServiceMessageResponse* internal_default_instance() {
    return reinterpret_cast<const ServiceMessageResponse*>(
               &_ServiceMessageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ServiceMessageResponse& a, ServiceMessageResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ServiceMessageResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServiceMessageResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServiceMessageResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ServiceMessageResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ServiceMessageResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ServiceMessageResponse& from) {
    ServiceMessageResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServiceMessageResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ServiceNetIO.ServiceMessageResponse";
  }
  protected:
  explicit ServiceMessageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSendUserNameFieldNumber = 3,
    kSendUserIdFieldNumber = 2,
    kSendOrderIdFieldNumber = 4,
    kSendStatusFieldNumber = 1,
  };
  // string send_user_name = 3;
  void clear_send_user_name();
  const std::string& send_user_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_send_user_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_send_user_name();
  PROTOBUF_NODISCARD std::string* release_send_user_name();
  void set_allocated_send_user_name(std::string* send_user_name);
  private:
  const std::string& _internal_send_user_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_send_user_name(const std::string& value);
  std::string* _internal_mutable_send_user_name();
  public:

  // int64 send_user_id = 2;
  void clear_send_user_id();
  int64_t send_user_id() const;
  void set_send_user_id(int64_t value);
  private:
  int64_t _internal_send_user_id() const;
  void _internal_set_send_user_id(int64_t value);
  public:

  // int64 send_order_id = 4;
  void clear_send_order_id();
  int64_t send_order_id() const;
  void set_send_order_id(int64_t value);
  private:
  int64_t _internal_send_order_id() const;
  void _internal_set_send_order_id(int64_t value);
  public:

  // int32 send_status = 1;
  void clear_send_status();
  int32_t send_status() const;
  void set_send_status(int32_t value);
  private:
  int32_t _internal_send_status() const;
  void _internal_set_send_status(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ServiceNetIO.ServiceMessageResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr send_user_name_;
    int64_t send_user_id_;
    int64_t send_order_id_;
    int32_t send_status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ServiceProto_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NewMessageRequest

// bytes header = 1;
inline void NewMessageRequest::clear_header() {
  _impl_.header_.ClearToEmpty();
}
inline const std::string& NewMessageRequest::header() const {
  // @@protoc_insertion_point(field_get:ServiceNetIO.NewMessageRequest.header)
  return _internal_header();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NewMessageRequest::set_header(ArgT0&& arg0, ArgT... args) {
 
 _impl_.header_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ServiceNetIO.NewMessageRequest.header)
}
inline std::string* NewMessageRequest::mutable_header() {
  std::string* _s = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:ServiceNetIO.NewMessageRequest.header)
  return _s;
}
inline const std::string& NewMessageRequest::_internal_header() const {
  return _impl_.header_.Get();
}
inline void NewMessageRequest::_internal_set_header(const std::string& value) {
  
  _impl_.header_.Set(value, GetArenaForAllocation());
}
inline std::string* NewMessageRequest::_internal_mutable_header() {
  
  return _impl_.header_.Mutable(GetArenaForAllocation());
}
inline std::string* NewMessageRequest::release_header() {
  // @@protoc_insertion_point(field_release:ServiceNetIO.NewMessageRequest.header)
  return _impl_.header_.Release();
}
inline void NewMessageRequest::set_allocated_header(std::string* header) {
  if (header != nullptr) {
    
  } else {
    
  }
  _impl_.header_.SetAllocated(header, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.header_.IsDefault()) {
    _impl_.header_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ServiceNetIO.NewMessageRequest.header)
}

// string server_name = 2;
inline void NewMessageRequest::clear_server_name() {
  _impl_.server_name_.ClearToEmpty();
}
inline const std::string& NewMessageRequest::server_name() const {
  // @@protoc_insertion_point(field_get:ServiceNetIO.NewMessageRequest.server_name)
  return _internal_server_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NewMessageRequest::set_server_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.server_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ServiceNetIO.NewMessageRequest.server_name)
}
inline std::string* NewMessageRequest::mutable_server_name() {
  std::string* _s = _internal_mutable_server_name();
  // @@protoc_insertion_point(field_mutable:ServiceNetIO.NewMessageRequest.server_name)
  return _s;
}
inline const std::string& NewMessageRequest::_internal_server_name() const {
  return _impl_.server_name_.Get();
}
inline void NewMessageRequest::_internal_set_server_name(const std::string& value) {
  
  _impl_.server_name_.Set(value, GetArenaForAllocation());
}
inline std::string* NewMessageRequest::_internal_mutable_server_name() {
  
  return _impl_.server_name_.Mutable(GetArenaForAllocation());
}
inline std::string* NewMessageRequest::release_server_name() {
  // @@protoc_insertion_point(field_release:ServiceNetIO.NewMessageRequest.server_name)
  return _impl_.server_name_.Release();
}
inline void NewMessageRequest::set_allocated_server_name(std::string* server_name) {
  if (server_name != nullptr) {
    
  } else {
    
  }
  _impl_.server_name_.SetAllocated(server_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.server_name_.IsDefault()) {
    _impl_.server_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ServiceNetIO.NewMessageRequest.server_name)
}

// int64 order_id = 3;
inline void NewMessageRequest::clear_order_id() {
  _impl_.order_id_ = int64_t{0};
}
inline int64_t NewMessageRequest::_internal_order_id() const {
  return _impl_.order_id_;
}
inline int64_t NewMessageRequest::order_id() const {
  // @@protoc_insertion_point(field_get:ServiceNetIO.NewMessageRequest.order_id)
  return _internal_order_id();
}
inline void NewMessageRequest::_internal_set_order_id(int64_t value) {
  
  _impl_.order_id_ = value;
}
inline void NewMessageRequest::set_order_id(int64_t value) {
  _internal_set_order_id(value);
  // @@protoc_insertion_point(field_set:ServiceNetIO.NewMessageRequest.order_id)
}

// string encode_type = 4;
inline void NewMessageRequest::clear_encode_type() {
  _impl_.encode_type_.ClearToEmpty();
}
inline const std::string& NewMessageRequest::encode_type() const {
  // @@protoc_insertion_point(field_get:ServiceNetIO.NewMessageRequest.encode_type)
  return _internal_encode_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NewMessageRequest::set_encode_type(ArgT0&& arg0, ArgT... args) {
 
 _impl_.encode_type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ServiceNetIO.NewMessageRequest.encode_type)
}
inline std::string* NewMessageRequest::mutable_encode_type() {
  std::string* _s = _internal_mutable_encode_type();
  // @@protoc_insertion_point(field_mutable:ServiceNetIO.NewMessageRequest.encode_type)
  return _s;
}
inline const std::string& NewMessageRequest::_internal_encode_type() const {
  return _impl_.encode_type_.Get();
}
inline void NewMessageRequest::_internal_set_encode_type(const std::string& value) {
  
  _impl_.encode_type_.Set(value, GetArenaForAllocation());
}
inline std::string* NewMessageRequest::_internal_mutable_encode_type() {
  
  return _impl_.encode_type_.Mutable(GetArenaForAllocation());
}
inline std::string* NewMessageRequest::release_encode_type() {
  // @@protoc_insertion_point(field_release:ServiceNetIO.NewMessageRequest.encode_type)
  return _impl_.encode_type_.Release();
}
inline void NewMessageRequest::set_allocated_encode_type(std::string* encode_type) {
  if (encode_type != nullptr) {
    
  } else {
    
  }
  _impl_.encode_type_.SetAllocated(encode_type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.encode_type_.IsDefault()) {
    _impl_.encode_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ServiceNetIO.NewMessageRequest.encode_type)
}

// bytes body = 5;
inline void NewMessageRequest::clear_body() {
  _impl_.body_.ClearToEmpty();
}
inline const std::string& NewMessageRequest::body() const {
  // @@protoc_insertion_point(field_get:ServiceNetIO.NewMessageRequest.body)
  return _internal_body();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NewMessageRequest::set_body(ArgT0&& arg0, ArgT... args) {
 
 _impl_.body_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ServiceNetIO.NewMessageRequest.body)
}
inline std::string* NewMessageRequest::mutable_body() {
  std::string* _s = _internal_mutable_body();
  // @@protoc_insertion_point(field_mutable:ServiceNetIO.NewMessageRequest.body)
  return _s;
}
inline const std::string& NewMessageRequest::_internal_body() const {
  return _impl_.body_.Get();
}
inline void NewMessageRequest::_internal_set_body(const std::string& value) {
  
  _impl_.body_.Set(value, GetArenaForAllocation());
}
inline std::string* NewMessageRequest::_internal_mutable_body() {
  
  return _impl_.body_.Mutable(GetArenaForAllocation());
}
inline std::string* NewMessageRequest::release_body() {
  // @@protoc_insertion_point(field_release:ServiceNetIO.NewMessageRequest.body)
  return _impl_.body_.Release();
}
inline void NewMessageRequest::set_allocated_body(std::string* body) {
  if (body != nullptr) {
    
  } else {
    
  }
  _impl_.body_.SetAllocated(body, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.body_.IsDefault()) {
    _impl_.body_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ServiceNetIO.NewMessageRequest.body)
}

// -------------------------------------------------------------------

// ServiceMessageResponse

// int32 send_status = 1;
inline void ServiceMessageResponse::clear_send_status() {
  _impl_.send_status_ = 0;
}
inline int32_t ServiceMessageResponse::_internal_send_status() const {
  return _impl_.send_status_;
}
inline int32_t ServiceMessageResponse::send_status() const {
  // @@protoc_insertion_point(field_get:ServiceNetIO.ServiceMessageResponse.send_status)
  return _internal_send_status();
}
inline void ServiceMessageResponse::_internal_set_send_status(int32_t value) {
  
  _impl_.send_status_ = value;
}
inline void ServiceMessageResponse::set_send_status(int32_t value) {
  _internal_set_send_status(value);
  // @@protoc_insertion_point(field_set:ServiceNetIO.ServiceMessageResponse.send_status)
}

// int64 send_user_id = 2;
inline void ServiceMessageResponse::clear_send_user_id() {
  _impl_.send_user_id_ = int64_t{0};
}
inline int64_t ServiceMessageResponse::_internal_send_user_id() const {
  return _impl_.send_user_id_;
}
inline int64_t ServiceMessageResponse::send_user_id() const {
  // @@protoc_insertion_point(field_get:ServiceNetIO.ServiceMessageResponse.send_user_id)
  return _internal_send_user_id();
}
inline void ServiceMessageResponse::_internal_set_send_user_id(int64_t value) {
  
  _impl_.send_user_id_ = value;
}
inline void ServiceMessageResponse::set_send_user_id(int64_t value) {
  _internal_set_send_user_id(value);
  // @@protoc_insertion_point(field_set:ServiceNetIO.ServiceMessageResponse.send_user_id)
}

// string send_user_name = 3;
inline void ServiceMessageResponse::clear_send_user_name() {
  _impl_.send_user_name_.ClearToEmpty();
}
inline const std::string& ServiceMessageResponse::send_user_name() const {
  // @@protoc_insertion_point(field_get:ServiceNetIO.ServiceMessageResponse.send_user_name)
  return _internal_send_user_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ServiceMessageResponse::set_send_user_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.send_user_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ServiceNetIO.ServiceMessageResponse.send_user_name)
}
inline std::string* ServiceMessageResponse::mutable_send_user_name() {
  std::string* _s = _internal_mutable_send_user_name();
  // @@protoc_insertion_point(field_mutable:ServiceNetIO.ServiceMessageResponse.send_user_name)
  return _s;
}
inline const std::string& ServiceMessageResponse::_internal_send_user_name() const {
  return _impl_.send_user_name_.Get();
}
inline void ServiceMessageResponse::_internal_set_send_user_name(const std::string& value) {
  
  _impl_.send_user_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ServiceMessageResponse::_internal_mutable_send_user_name() {
  
  return _impl_.send_user_name_.Mutable(GetArenaForAllocation());
}
inline std::string* ServiceMessageResponse::release_send_user_name() {
  // @@protoc_insertion_point(field_release:ServiceNetIO.ServiceMessageResponse.send_user_name)
  return _impl_.send_user_name_.Release();
}
inline void ServiceMessageResponse::set_allocated_send_user_name(std::string* send_user_name) {
  if (send_user_name != nullptr) {
    
  } else {
    
  }
  _impl_.send_user_name_.SetAllocated(send_user_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.send_user_name_.IsDefault()) {
    _impl_.send_user_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ServiceNetIO.ServiceMessageResponse.send_user_name)
}

// int64 send_order_id = 4;
inline void ServiceMessageResponse::clear_send_order_id() {
  _impl_.send_order_id_ = int64_t{0};
}
inline int64_t ServiceMessageResponse::_internal_send_order_id() const {
  return _impl_.send_order_id_;
}
inline int64_t ServiceMessageResponse::send_order_id() const {
  // @@protoc_insertion_point(field_get:ServiceNetIO.ServiceMessageResponse.send_order_id)
  return _internal_send_order_id();
}
inline void ServiceMessageResponse::_internal_set_send_order_id(int64_t value) {
  
  _impl_.send_order_id_ = value;
}
inline void ServiceMessageResponse::set_send_order_id(int64_t value) {
  _internal_set_send_order_id(value);
  // @@protoc_insertion_point(field_set:ServiceNetIO.ServiceMessageResponse.send_order_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ServiceNetIO

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ServiceProto_2eproto
